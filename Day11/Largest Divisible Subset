class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n+1,1),hash(n+1);
        int l=0,maxi=0;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;++i){
            hash[i]=i;
            for(int j=0;j<i;++j){
                if(nums[i]%nums[j]==0 &&dp[j]+1>dp[i]){
                    dp[i]=dp[j]+1;
                    hash[i]=j;
                }
            }
            if(dp[i]>maxi){
                maxi=dp[i];
                l=i;
            }
        }
        vector<int> v;
        while(hash[l]!=l){
            v.push_back(nums[l]);
            l=hash[l];
        }
        v.push_back(nums[l]);
        reverse(v.begin(),v.end());
        return v;
    }
};

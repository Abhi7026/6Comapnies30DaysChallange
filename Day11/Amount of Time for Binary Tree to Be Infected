/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int amountOfTime(TreeNode* root, int start) {
       queue<pair<TreeNode*, TreeNode*>> q;
        q.push({root, NULL});
        while (!q.empty()) {
            auto [node, parent] = q.front(); q.pop();
            if (parent)
                adj[node->val].push_back(parent->val);
            if (node->left) {
                adj[node->val].push_back(node->left->val);
                q.push({node->left, node});
            }
            if (node->right) {
                adj[node->val].push_back(node->right->val);
                q.push({node->right, node});
            }
        }
        return dfs(start)-1;
    }
private:
    vector<int> adj[100001];
    bool visited[100001] = {};
    
    int dfs(int v) {
        int ret = 0;
        visited[v] = true;
        for (int u: adj[v]) {
            if (!visited[u])
                ret = max(ret, dfs(u));
        }
        return ret + 1; 
    }
};

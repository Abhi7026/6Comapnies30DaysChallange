/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    int max_sum = 0;
array<int, 3> dfs(TreeNode* n) {
    auto l = n->left ? dfs(n->left) : array<int, 3>{0, n->val, n->val - 1};
    auto r = n->right ? dfs(n->right) : array<int, 3>{0, n->val + 1, n->val};
    if (l[2] < n->val && n->val < r[1]) {
        max_sum = max(max_sum, n->val + l[0] + r[0]);
        return {n->val + l[0] + r[0], l[1], r[2]};        
    }
    return {0, INT_MIN, INT_MAX};
}
int maxSumBST(TreeNode* root) {
    dfs(root);
    return max_sum;
}
};
